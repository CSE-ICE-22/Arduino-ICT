# Arduino AutoFan Project

Contains the code and setup instructions for an Arduino-based AutoFan system that turns a fan motor on or off based on room temperature using an LM35 temperature sensor.

## Required Components

To build this project, you will need the following components:

- **1 × Arduino Uno**: Microcontroller-based development board to control the AutoFan system.
- **1 × 9V DC Motor**: Drives the fan.
- **1 × LM35 Temperature Sensor**: Measures room temperature.
- **1 × BC547 Transistor**: Supplies sufficient current to drive the motor.
- **1 × 1kΩ Resistor**: Limits current to the transistor’s base.
- **1 × 1N4001 Rectifier Diode**: Protects the transistor from motor flyback current.

## Hardware Setup

1. **LM35 Temperature Sensor**:
   - Connect V+ to Arduino 5V.
   - Connect GND to Arduino GND.
   - Connect Vout to analog pin A0.
2. **Motor and Transistor Circuit**:
   - Connect a 1kΩ resistor from Arduino pin 8 to the BC547 transistor’s Base (B).
   - Connect the motor between the transistor’s Collector (C) and a separate 9V power supply.
   - Connect the transistor’s Emitter (E) to the common GND (shared with Arduino and 9V supply).
   - Connect a 1N4001 diode in parallel with the motor, cathode to the 9V line, anode to the Collector.
3. **Assemble**:
   - Use a breadboard for prototyping, ensuring a common ground between Arduino and 9V supply.
   - Verify connections to prevent short circuits.
   

> **Warning**: Ensure the 9V supply is properly isolated from the Arduino’s 5V line to avoid damage.

## Purpose of Key Components

- **BC547 Transistor**:
  The transistor serves as an electronic switch, enabling the Arduino to control the high-current 9V DC motor with a low-current signal. Arduino digital pins can only supply ~20mA, insufficient for a motor requiring 100mA or more. The BC547 NPN transistor:
  - Receives a small current at the Base (via the 1kΩ resistor) from pin 8.
  - Amplifies this to allow a larger current to flow from the Collector (motor) to the Emitter (GND).
  - When pin 8 is HIGH, the transistor turns ON, powering the motor. When LOW, it turns OFF, stopping the motor.
  The 1kΩ resistor limits the base current, protecting the transistor and Arduino.

> **Info**: The transistor safely controls high-power devices with minimal Arduino current.

- **1N4001 Rectifier Diode**:
  The diode protects the transistor from flyback voltage (back-EMF) generated by the motor’s inductive load. When the transistor turns OFF, the motor’s collapsing magnetic field induces a high-voltage spike that could damage the transistor or Arduino. The 1N4001 diode, placed in parallel with the motor (cathode to 9V, anode to Collector):
  - Remains reverse-biased when the motor is ON, not conducting.
  - Becomes forward-biased during flyback, allowing the induced current to loop through the diode and motor, safely dissipating energy.
  This “flyback diode” prevents component damage.

> **Warning**: Omitting the diode risks transistor failure due to voltage spikes.

## Arduino Code

```cpp
const int MOTOR_PIN = 8;
const int SENSOR_PIN = A0;
int sensorValue = 0;

void setup() {
  pinMode(MOTOR_PIN, OUTPUT);
  Serial.begin(115200);
}

void loop() {
  sensorValue = analogRead(SENSOR_PIN);
  float temp = getTemp(sensorValue);
  Serial.print("Temp: ");
  Serial.println(temp);
  
  if (temp > 30) {
    digitalWrite(MOTOR_PIN, HIGH);
  } else {
    digitalWrite(MOTOR_PIN, LOW);
  }
}

float getTemp(int val) {
  return (val * 0.49) - 49.8;
}
```

> **Info**:
> - The `setup()` initializes pin 8 as an output and starts serial communication at 115200 baud.
> - The `loop()` reads the LM35 sensor value from A0, converts it to temperature using `getTemp()`, and prints it to the Serial Monitor.
> - If the temperature exceeds 30°C, the motor turns ON; otherwise, it turns OFF.
> - The `getTemp()` function converts the analog reading to Celsius using `(val * 0.49) - 49.8`, based on the LM35’s 10mV/°C output and Arduino’s 5V ADC range.

## How to Use

1. Upload the code to the Arduino Uno using the Arduino IDE.
2. Connect the hardware as described, ensuring a common ground.
3. Open the Serial Monitor (115200 baud) to monitor temperature readings.
4. Power the Arduino (via USB) and the motor (via 9V supply).
5. The fan motor will turn ON when the temperature exceeds 30°C and OFF when below.

> **Success**: If the fan activates above 30°C (e.g., when heating the LM35), the setup is correct. If not, verify wiring, sensor placement, or adjust the 30°C threshold.

> **Debugging Tip**: Check temperature values in the Serial Monitor. Erratic readings may indicate loose LM35 connections or electrical noise.
